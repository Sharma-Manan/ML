# -*- coding: utf-8 -*-
"""Titanic Survival.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-qFFpRB2lQJpYZ3fMrCesCMX1dH00IEE

# Import Libraries
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier

"""# Read Dataset"""

df = pd.read_csv("titanic.csv")

"""# Feature Engineering"""

df.head()

df.info()

df['Name'].unique()

df.columns

df['Ticket'].head()

features = df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex', 'Embarked' ]].copy()
target = df['Survived'].copy()

features.isna().sum()

features['Sex'] = LabelEncoder().fit_transform(features['Sex'])

features['Embarked'] = features['Embarked'].fillna(features['Embarked'].mode()[0])

features.isna().sum()

features.groupby('Pclass')['Age'].median()

features['Age'] = features.groupby('Pclass')['Age'].transform(lambda x:x.fillna(x.median()))

features.isna().sum()

features['Embarked'].unique()

features = pd.get_dummies(features, columns=['Embarked'])

features.dtypes

"""# Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=23)

"""# EDA"""

features_with_target = features.copy()
features_with_target['Survived'] = target

plt.figure(figsize=(10,6))
sns.heatmap(features_with_target.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Feature Correlation with Survived")
plt.show()

sns.countplot(x=target, palette="Greens")
plt.title("Survival Count")
plt.show()

sns.histplot(features['Age'], bins=50, kde=True)
plt.title("Age Distribution")
plt.show()

sns.barplot(x=df['Pclass'], y=target, ci=None, palette="Greens")
plt.title("Survival Rate by Passenger Class")
plt.show()

"""# Model Training"""

grid = {
    'max_depth' : [3,5,7,10],
    'min_samples_split' : [2,5,10,15],
    'min_samples_leaf' : [1,2,5],
    'criterion' : ['gini','entropy']
}

dt = DecisionTreeClassifier(random_state=23)

grid_s = GridSearchCV(dt, grid, cv = 5, scoring = 'accuracy')

grid_s.fit(x_train, y_train)

preds = grid_s.predict(x_test)

"""# Model Evaluation"""

print("Accuracy:", accuracy_score(y_test, preds)*100)
print("\nClassification Report:")
print(classification_report(y_test, preds))

cm = confusion_matrix(y_test, preds)

# Plot confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Greens', xticklabels=['Not Survived', 'Survived'], yticklabels=['Not Survived', 'Survived'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()